/* Element Chalk Variables */
@use "sass:math";
@use "sass:map";

@use "./mixins/config.scss" as *;

// Special comment for theme configurator
// type|skipAutoTranslation|Category|Order
// skipAutoTranslation 1

// types
$types: primary, success, warning, danger, error, info;

// Color
$colors: () !default;
$colors: map.deep-merge(
  (
    "white": #ffffff,
    "black": #000000,
    "primary": (
      "base": #409eff,
    ),
    "success": (
      "base": #67c23a,
    ),
    "warning": (
      "base": #e6a23c,
    ),
    "danger": (
      "base": #f56c6c,
    ),
    "error": (
      "base": #f56c6c,
    ),
    "info": (
      "base": #909399,
    ),
  ),
  $colors
);

$color-white: map.get($colors, "white") !default;
$color-black: map.get($colors, "black") !default;
$color-primary: map.get($colors, "primary", "base") !default;
$color-success: map.get($colors, "success", "base") !default;
$color-warning: map.get($colors, "warning", "base") !default;
$color-danger: map.get($colors, "danger", "base") !default;
$color-error: map.get($colors, "error", "base") !default;
$color-info: map.get($colors, "info", "base") !default;

// https://sass-lang.com/documentation/values/maps#immutability
@mixin set-color-type-light($type, $number) {
  $colors: map.deep-merge(
    (
      $type: (
        "light-#{$number}": mix($color-white, map.get($colors, $type, "base"), math.percentage(math.div($number, 10))),
      ),
    ),
    $colors
  ) !global;
}

// $colors.primary.light-i
// --el-color-primary-light-i
// 10% 53a8ff
// 20% 66b1ff
// 30% 79bbff
// 40% 8cc5ff
// 50% a0cfff
// 60% b3d8ff
// 70% c6e2ff
// 80% d9ecff
// 90% ecf5ff
@for $i from 1 through 9 {
  @each $type in $types {
    @include set-color-type-light($type, $i);
  }
}

$text-color: () !default;
$text-color: map.merge(
  (
    "primary": #303133,
    "regular": #606266,
    "secondary": #909399,
    "placeholder": #c0c4cc,
  ),
  $text-color
);

$border-color: () !default;
$border-color: map.merge(
  (
    "base": #dcdfe6,
    "light": #e4e7ed,
    "lighter": #ebeef5,
    "extra-light": #f2f6fc,
  ),
  $border-color
);

// Background
/// color|1|Background Color|4
$background-color-base: #f5f7fa !default;

// Border
$border-width-base: 1px !default;
$border-style-base: solid !default;
$border-color-hover: var(--el-text-color-placeholder) !default;
$border-base: $border-width-base $border-style-base map.get($border-color, "base") !default;
/// borderRadius|1|Radius|0

$border-radius: () !default;
$border-radius: map.merge(
  (
    "base": 4px,
    "small": 2px,
    "round": 20px,
    "circle": 100%,
  ),
  $border-radius
);

// Box-shadow
$box-shadow: () !default;
$box-shadow: map.merge(
  (
    "base": (
      0 2px 4px rgba(0, 0, 0, 0.12),
      0 0 6px rgba(0, 0, 0, 0.04),
    ),
    "light": 0 2px 12px 0 rgba(0, 0, 0, 0.1),
  ),
  $box-shadow
);

// Typography
$font-size: () !default;
$font-size: map.merge(
  (
    "extra-large": 20px,
    "large": 18px,
    "medium": 16px,
    "base": 14px,
    "small": 13px,
    "extra-small": 12px,
  ),
  $font-size
);

// Disable base
$disabled-fill-base: var(--el-background-color-base) !default;
$disabled-color-base: var(--el-text-color-placeholder) !default;
$disabled-border-base: var(--el-border-color-light) !default;
